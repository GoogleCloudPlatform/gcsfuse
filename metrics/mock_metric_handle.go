// Code generated by MockGen. DO NOT EDIT.
// Source: metrics/metric_handle.go
//
// Generated by this command:
//
//	mockgen -source=metrics/metric_handle.go -destination=metrics/mock_metric_handle.go -package=metrics
//

// Package metrics is a generated GoMock package.
package metrics

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockMetricHandle is a mock of MetricHandle interface.
type MockMetricHandle struct {
	ctrl     *gomock.Controller
	recorder *MockMetricHandleMockRecorder
	isgomock struct{}
}

// MockMetricHandleMockRecorder is the mock recorder for MockMetricHandle.
type MockMetricHandleMockRecorder struct {
	mock *MockMetricHandle
}

// NewMockMetricHandle creates a new mock instance.
func NewMockMetricHandle(ctrl *gomock.Controller) *MockMetricHandle {
	mock := &MockMetricHandle{ctrl: ctrl}
	mock.recorder = &MockMetricHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricHandle) EXPECT() *MockMetricHandleMockRecorder {
	return m.recorder
}

// BufferedReadDownloadBlockLatency mocks base method.
func (m *MockMetricHandle) BufferedReadDownloadBlockLatency(ctx context.Context, duration time.Duration, status string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BufferedReadDownloadBlockLatency", ctx, duration, status)
}

// BufferedReadDownloadBlockLatency indicates an expected call of BufferedReadDownloadBlockLatency.
func (mr *MockMetricHandleMockRecorder) BufferedReadDownloadBlockLatency(ctx, duration, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BufferedReadDownloadBlockLatency", reflect.TypeOf((*MockMetricHandle)(nil).BufferedReadDownloadBlockLatency), ctx, duration, status)
}

// BufferedReadFallbackTriggerCount mocks base method.
func (m *MockMetricHandle) BufferedReadFallbackTriggerCount(inc int64, reason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BufferedReadFallbackTriggerCount", inc, reason)
}

// BufferedReadFallbackTriggerCount indicates an expected call of BufferedReadFallbackTriggerCount.
func (mr *MockMetricHandleMockRecorder) BufferedReadFallbackTriggerCount(inc, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BufferedReadFallbackTriggerCount", reflect.TypeOf((*MockMetricHandle)(nil).BufferedReadFallbackTriggerCount), inc, reason)
}

// BufferedReadReadLatency mocks base method.
func (m *MockMetricHandle) BufferedReadReadLatency(ctx context.Context, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BufferedReadReadLatency", ctx, duration)
}

// BufferedReadReadLatency indicates an expected call of BufferedReadReadLatency.
func (mr *MockMetricHandleMockRecorder) BufferedReadReadLatency(ctx, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BufferedReadReadLatency", reflect.TypeOf((*MockMetricHandle)(nil).BufferedReadReadLatency), ctx, duration)
}

// BufferedReadScheduledBlockCount mocks base method.
func (m *MockMetricHandle) BufferedReadScheduledBlockCount(inc int64, status string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BufferedReadScheduledBlockCount", inc, status)
}

// BufferedReadScheduledBlockCount indicates an expected call of BufferedReadScheduledBlockCount.
func (mr *MockMetricHandleMockRecorder) BufferedReadScheduledBlockCount(inc, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BufferedReadScheduledBlockCount", reflect.TypeOf((*MockMetricHandle)(nil).BufferedReadScheduledBlockCount), inc, status)
}

// FileCacheReadBytesCount mocks base method.
func (m *MockMetricHandle) FileCacheReadBytesCount(inc int64, readType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FileCacheReadBytesCount", inc, readType)
}

// FileCacheReadBytesCount indicates an expected call of FileCacheReadBytesCount.
func (mr *MockMetricHandleMockRecorder) FileCacheReadBytesCount(inc, readType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileCacheReadBytesCount", reflect.TypeOf((*MockMetricHandle)(nil).FileCacheReadBytesCount), inc, readType)
}

// FileCacheReadCount mocks base method.
func (m *MockMetricHandle) FileCacheReadCount(inc int64, cacheHit bool, readType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FileCacheReadCount", inc, cacheHit, readType)
}

// FileCacheReadCount indicates an expected call of FileCacheReadCount.
func (mr *MockMetricHandleMockRecorder) FileCacheReadCount(inc, cacheHit, readType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileCacheReadCount", reflect.TypeOf((*MockMetricHandle)(nil).FileCacheReadCount), inc, cacheHit, readType)
}

// FileCacheReadLatencies mocks base method.
func (m *MockMetricHandle) FileCacheReadLatencies(ctx context.Context, duration time.Duration, cacheHit bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FileCacheReadLatencies", ctx, duration, cacheHit)
}

// FileCacheReadLatencies indicates an expected call of FileCacheReadLatencies.
func (mr *MockMetricHandleMockRecorder) FileCacheReadLatencies(ctx, duration, cacheHit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileCacheReadLatencies", reflect.TypeOf((*MockMetricHandle)(nil).FileCacheReadLatencies), ctx, duration, cacheHit)
}

// FsOpsCount mocks base method.
func (m *MockMetricHandle) FsOpsCount(inc int64, fsOp string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FsOpsCount", inc, fsOp)
}

// FsOpsCount indicates an expected call of FsOpsCount.
func (mr *MockMetricHandleMockRecorder) FsOpsCount(inc, fsOp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FsOpsCount", reflect.TypeOf((*MockMetricHandle)(nil).FsOpsCount), inc, fsOp)
}

// FsOpsErrorCount mocks base method.
func (m *MockMetricHandle) FsOpsErrorCount(inc int64, fsErrorCategory, fsOp string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FsOpsErrorCount", inc, fsErrorCategory, fsOp)
}

// FsOpsErrorCount indicates an expected call of FsOpsErrorCount.
func (mr *MockMetricHandleMockRecorder) FsOpsErrorCount(inc, fsErrorCategory, fsOp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FsOpsErrorCount", reflect.TypeOf((*MockMetricHandle)(nil).FsOpsErrorCount), inc, fsErrorCategory, fsOp)
}

// FsOpsLatency mocks base method.
func (m *MockMetricHandle) FsOpsLatency(ctx context.Context, duration time.Duration, fsOp string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FsOpsLatency", ctx, duration, fsOp)
}

// FsOpsLatency indicates an expected call of FsOpsLatency.
func (mr *MockMetricHandleMockRecorder) FsOpsLatency(ctx, duration, fsOp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FsOpsLatency", reflect.TypeOf((*MockMetricHandle)(nil).FsOpsLatency), ctx, duration, fsOp)
}

// GcsDownloadBytesCount mocks base method.
func (m *MockMetricHandle) GcsDownloadBytesCount(inc int64, readType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GcsDownloadBytesCount", inc, readType)
}

// GcsDownloadBytesCount indicates an expected call of GcsDownloadBytesCount.
func (mr *MockMetricHandleMockRecorder) GcsDownloadBytesCount(inc, readType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GcsDownloadBytesCount", reflect.TypeOf((*MockMetricHandle)(nil).GcsDownloadBytesCount), inc, readType)
}

// GcsReadBytesCount mocks base method.
func (m *MockMetricHandle) GcsReadBytesCount(inc int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GcsReadBytesCount", inc)
}

// GcsReadBytesCount indicates an expected call of GcsReadBytesCount.
func (mr *MockMetricHandleMockRecorder) GcsReadBytesCount(inc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GcsReadBytesCount", reflect.TypeOf((*MockMetricHandle)(nil).GcsReadBytesCount), inc)
}

// GcsReadBytesCountValue mocks base method.
func (m *MockMetricHandle) GcsReadBytesCountValue() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GcsReadBytesCountValue")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GcsReadBytesCountValue indicates an expected call of GcsReadBytesCountValue.
func (mr *MockMetricHandleMockRecorder) GcsReadBytesCountValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GcsReadBytesCountValue", reflect.TypeOf((*MockMetricHandle)(nil).GcsReadBytesCountValue))
}

// GcsReadCount mocks base method.
func (m *MockMetricHandle) GcsReadCount(inc int64, readType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GcsReadCount", inc, readType)
}

// GcsReadCount indicates an expected call of GcsReadCount.
func (mr *MockMetricHandleMockRecorder) GcsReadCount(inc, readType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GcsReadCount", reflect.TypeOf((*MockMetricHandle)(nil).GcsReadCount), inc, readType)
}

// GcsReaderCount mocks base method.
func (m *MockMetricHandle) GcsReaderCount(inc int64, ioMethod string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GcsReaderCount", inc, ioMethod)
}

// GcsReaderCount indicates an expected call of GcsReaderCount.
func (mr *MockMetricHandleMockRecorder) GcsReaderCount(inc, ioMethod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GcsReaderCount", reflect.TypeOf((*MockMetricHandle)(nil).GcsReaderCount), inc, ioMethod)
}

// GcsRequestCount mocks base method.
func (m *MockMetricHandle) GcsRequestCount(inc int64, gcsMethod string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GcsRequestCount", inc, gcsMethod)
}

// GcsRequestCount indicates an expected call of GcsRequestCount.
func (mr *MockMetricHandleMockRecorder) GcsRequestCount(inc, gcsMethod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GcsRequestCount", reflect.TypeOf((*MockMetricHandle)(nil).GcsRequestCount), inc, gcsMethod)
}

// GcsRequestLatencies mocks base method.
func (m *MockMetricHandle) GcsRequestLatencies(ctx context.Context, duration time.Duration, gcsMethod string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GcsRequestLatencies", ctx, duration, gcsMethod)
}

// GcsRequestLatencies indicates an expected call of GcsRequestLatencies.
func (mr *MockMetricHandleMockRecorder) GcsRequestLatencies(ctx, duration, gcsMethod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GcsRequestLatencies", reflect.TypeOf((*MockMetricHandle)(nil).GcsRequestLatencies), ctx, duration, gcsMethod)
}

// GcsRetryCount mocks base method.
func (m *MockMetricHandle) GcsRetryCount(inc int64, retryErrorCategory string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GcsRetryCount", inc, retryErrorCategory)
}

// GcsRetryCount indicates an expected call of GcsRetryCount.
func (mr *MockMetricHandleMockRecorder) GcsRetryCount(inc, retryErrorCategory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GcsRetryCount", reflect.TypeOf((*MockMetricHandle)(nil).GcsRetryCount), inc, retryErrorCategory)
}
