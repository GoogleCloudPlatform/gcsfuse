# Copyright 2018 The Kubernetes Authors.
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Pod
metadata:
  name: fio-tester-{{ .Values.fio.readType }}-{{ lower .Values.fio.fileSize }}-{{ lower .Values.fio.blockSize }}-{{ .Values.scenario }}
  {{- if ne .Values.scenario "local-ssd" }}
  annotations:
    gke-gcsfuse/volumes: "true"
  {{- end }}
spec:
  restartPolicy: Never
  nodeSelector:
    cloud.google.com/gke-ephemeral-storage-local-ssd: "true"
    node.kubernetes.io/instance-type: {{ .Values.nodeType }}
  containers:
  - name: fio-tester
    image: {{ .Values.image }}
    securityContext: # for cache dropping in the benchmarking tests.
      privileged: true
    resources:
      limits:
        cpu: {{ .Values.resourceLimits.cpu }}
        memory: {{ .Values.resourceLimits.memory }}
      requests:
        cpu: {{ .Values.resourceRequests.cpu }}
        memory: {{ .Values.resourceRequests.memory }}
    command:
      - "/bin/sh"
      - "-c"
      - |
        echo "Install dependencies..."
        apt-get update
        apt-get install -y libaio-dev gcc make git time wget
        
        {{ if eq .Values.scenario "local-ssd" }}
        echo "Installing gsutil..."
        apt-get update && apt-get install -y apt-transport-https ca-certificates gnupg curl
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        apt-get update && apt-get install -y google-cloud-cli

        gsutil -m cp -R gs://{{ .Values.bucketName }}/* /data 

        echo "Sleeping 5 minutes to wait for Local SSD RAID to populate data."
        sleep 300
        {{ end }}

        # We are building fio from source because of the issue: https://github.com/axboe/fio/issues/1668.
        # The sed command below is to address internal bug b/309563824.
        # As recorded in this bug, fio by-default supports
        # clat percentile values to be calculated accurately upto only
        # 2^(FIO_IO_U_PLAT_GROUP_NR + 5) ns = 17.17 seconds.
        # (with default value of FIO_IO_U_PLAT_GROUP_NR = 29). This change increases it upto 32, to allow
        # latencies upto 137.44s to be calculated accurately.
        git clone -b fio-3.36 https://github.com/axboe/fio.git
        cd fio
        sed -i 's/define \+FIO_IO_U_PLAT_GROUP_NR \+\([0-9]\+\)/define FIO_IO_U_PLAT_GROUP_NR 32/g' stat.h
        ./configure && make && make install
        cd ..

        echo "Preparing fio config file..."
        filename=/read_cache_load_test.fio
        {{ if eq .Values.fio.fileSize "200G" }}
        cat > $filename << EOF
        [global]
        ioengine=libaio
        direct=1
        fadvise_hint=0
        iodepth=64
        invalidate=1
        nrfiles=1
        thread=1
        openfiles=1
        group_reporting=1
        create_serialize=0
        allrandrepeat=1
        numjobs=100
        filename=/data/0

        [Workload]
        bs=1M
        filesize=200G
        size=2G
        rw={{ .Values.fio.readType }}
        offset=0
        offset_increment=1%
        EOF
        {{ else }}
        wget -O $filename https://raw.githubusercontent.com/GoogleCloudPlatform/gcsfuse/read_cache_release/perfmetrics/scripts/job_files/read_cache_load_test.fio
        {{ end }}

        echo "Setup default values..."
        epoch=4
        no_of_files_per_thread={{ .Values.fio.filesPerThread }}
        read_type={{ .Values.fio.readType }}
        pause_in_seconds=20
        block_size={{ .Values.fio.blockSize }}
        file_size={{ .Values.fio.fileSize }}
        num_of_threads={{ .Values.fio.numThreads }}
        workload_dir=/data

        # Cleaning the pagecache, dentries and inode cache before the starting the workload.
        echo "Drop page cache..."
        echo 3 > /proc/sys/vm/drop_caches

        # Specially for gcsfuse mounted dir: the purpose of this approach is to efficiently
        # populate the gcsfuse metadata cache by utilizing the list call, which internally
        # works like bulk stat call rather than making individual stat calls.
        # And to reduce the logs redirecting the command standard-output to /dev/null.
        echo "List workload dir..."
        time ls -R $workload_dir 1> /dev/null

        echo "Run fio tests..."
        mkdir -p /data/fio-output/{{ .Values.scenario }}/$read_type

        # dump the gcsfuse-mount-configuration to a file in output-directory.
        {{ if eq .Values.scenario "gcsfuse-generic" }}
        echo "{{ .Values.gcsfuse.mountOptions }}" > /data/fio-output/{{ .Values.scenario }}/$read_type/gcsfuse_mount_options
        {{ end }}

        for i in $(seq $epoch); do

          echo "[Epoch ${i}] start time:" `date +%s`
          free -mh # Memory usage before workload start.
          NUMJOBS=$num_of_threads NRFILES=$no_of_files_per_thread FILE_SIZE=$file_size BLOCK_SIZE=$block_size READ_TYPE=$read_type DIR=$workload_dir fio ${filename} --alloc-size=1048576 --output-format=json --output="/data/fio-output/{{ .Values.scenario }}/${read_type}/epoch${i}.json"
          free -mh # Memory usage after workload completion.
          echo "[Epoch ${i}] end time:" `date +%s`

          # To free pagecache.
          # Intentionally not clearing dentries and inodes: clearing them
          # will necessitate the repopulation of the type cache in gcsfuse 2nd epoch onwards.
          # Since we use "ls -R workload_dir" to populate the cache (sort of hack to fill the cache quickly)
          # efficiently in the first epoch, it does not populate the negative
          # entry for the stat cache.
          # So just to stop the execution of  “ls -R workload_dir” command at the start
          # of every epoch, not clearing the inodes.
          echo 1 > /proc/sys/vm/drop_caches

          sleep $pause_in_seconds
        done
        
        {{ if eq .Values.scenario "local-ssd" }}
        gsutil -m cp -R /data/fio-output/local-ssd gs://{{ .Values.bucketName }}/fio-output
        {{ end }}
        
        echo "fio job completed!"
    volumeMounts:
    - name: dshm
      mountPath: /dev/shm
    - name: data-vol
      mountPath: /data
  volumes:
  - name: dshm
    emptyDir:
      medium: Memory
  - name: data-vol
  {{- if eq .Values.scenario "local-ssd" }}
    emptyDir: {}
  {{- else if eq .Values.scenario "gcsfuse-generic" }}
    csi:
      driver: gcsfuse.csi.storage.gke.io
      volumeAttributes:
        bucketName: {{ .Values.bucketName }}
        mountOptions: "{{ .Values.gcsfuse.mountOptions }}"
  {{- else if eq .Values.scenario "gcsfuse-file-cache" }}
    csi:
      driver: gcsfuse.csi.storage.gke.io
      volumeAttributes:
        bucketName: {{ .Values.bucketName }}
        metadataCacheTTLSeconds: "{{ .Values.gcsfuse.metadataCacheTTLSeconds }}"
        metadataTypeCacheCapacity: "{{ .Values.gcsfuse.metadataTypeCacheCapacity }}"
        metadataStatCacheCapacity: "{{ .Values.gcsfuse.metadataStatCacheCapacity }}"
        fileCacheCapacity: "{{ .Values.gcsfuse.fileCacheCapacity }}"
        fileCacheForRangeRead: "true"
        gcsfuseLoggingSeverity: "debug"
        mountOptions: implicit-dirs
  {{- else }}
    csi:
      driver: gcsfuse.csi.storage.gke.io
      volumeAttributes:
        bucketName: {{ .Values.bucketName }}
        metadataCacheTTLSeconds: "{{ .Values.gcsfuse.metadataCacheTTLSeconds }}"
        metadataTypeCacheCapacity: "{{ .Values.gcsfuse.metadataTypeCacheCapacity }}"
        metadataStatCacheCapacity: "{{ .Values.gcsfuse.metadataStatCacheCapacity }}"
        gcsfuseLoggingSeverity: "debug"
        mountOptions: implicit-dirs
  {{- end }}
